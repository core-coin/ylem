name: ylem pipeline
on: push
env:
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6
jobs:
  build:
    strategy:
      matrix:
        platform: [
          #{os: ubuntu-latest, path: linux-x86_64},
          #{os: raspbian-private, path: linux-arm64},
          #{os: macos-latest, path: darwin-x86_64},
          {os: windows-latest, path: windows-x86_64},
        ]
    runs-on: ${{matrix.platform.os}}
    steps:
    - uses: actions/checkout@v2
    - name: Ccache
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ matrix.platform }}-cache-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ matrix.platform }}-cache-
    - name: Build
      if: ${{ matrix.platform.os != 'windows-latest' }}
      run: |
        sh scripts/install_deps.sh
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        mkdir build && cd build
        cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..
        make -j4 ylem
    - name: Setup Win
      if: ${{ matrix.platform.os == 'windows-latest' }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        update: true
        install: >
          mingw-w64-x86_64-make
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-gcc
    - name: Boost
      if: ${{ matrix.platform.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        mkdir -p deps/boost
        wget https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_1_83_0.tar.gz -O boost.tar.gz
        tar -xf boost.tar.gz && ls -al
        cd boost_1_83_0 && ls -al && .\bootstrap.sh
        .\b2 -j4 -d0 link=static runtime-link=static variant=release threading=multi address-model=64 --with-filesystem --with-system --with-program_options --with-test --prefix="deps\boost" install
    - name: Build Win
      if: ${{ matrix.platform.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        mkdir build && cd build && cmake .. -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER_LAUNCHER=ccache && mingw32-make ylem
  release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
        tag: ${{steps.version_bump.outputs.tag}}
        url: ${{steps.create_release.outputs.upload_url}}
    needs: build
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive
        token: ${{secrets.GITHUB_TOKEN}}
    - name: Version
      id: version_bump
      uses: anothrNick/github-tag-action@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        DEFAULT_BUMP: "patch"
        RELEASE_BRANCHES: "master"
        WITH_V: false
    - name: Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{steps.version_bump.outputs.tag}}
        release_name: ylem ${{steps.version_bump.outputs.tag}}
        draft: false
        prerelease: false
  pack:
    needs: release
    strategy:
      matrix:
        platform: [
          {os: ubuntu-latest, path: linux-x86_64},
	      {os: raspbian-private, path: linux-arm64},
          {os: macos-latest, path: darwin-x86_64},
        ]
    runs-on: ${{matrix.platform.os}}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Deps
      run: sh scripts/install_deps.sh
    - name: Ccache
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ matrix.platform }}-cache-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ matrix.platform }}-cache-
    - name: Build
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        echo -n "" >prerelease.txt
        mkdir build && cd build
        cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DPROJECT_VERSION=${{needs.release.outputs.tag}} ..
        make -j4 ylem
    - name: Checksum
      run: cd build/solc && sha256sum ylem > ylem.checksum
    - name: Upload checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{needs.release.outputs.url}}
        asset_path: ./build/solc/ylem.checksum
        asset_name: ylem-${{matrix.platform.path}}.checksum
        asset_content_type: application/zip
    - name: Upload assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{needs.release.outputs.url}}
        asset_path: ./build/solc/ylem
        asset_name: ylem-${{matrix.platform.path}}
        asset_content_type: application/zip
